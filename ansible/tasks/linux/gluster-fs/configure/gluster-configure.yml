- name: Linux GlusterFS - Form a cluster - peer nodes.
  command: "gluster peer probe {{ peernode }}"
  loop: "{{ ansible_play_hosts | flatten(levels=1) }}"
  when: (inventory_hostname != peernode)
  loop_control:
    loop_var: peernode
    pause: 3
  ignore_errors: yes

#- name: Linux GlusterFS - Configure gluster volume
#  gluster.gluster.gluster_volume:
#    state: present
#    name: "{{ gluster_volume_name }}"
#    bricks: /{{ gluster_brick_name }}/{{ gluster_volume_name }}
#    rebalance: yes
#    #redundancies: 2
#    replicas: 2
#    cluster: "{{ hostvars | join(',') }}"
#    force: true # has to be forced when you mount at root partition brick
#    transport: tcp
#    #stripes: 2
#    options:
#      { performance.cache-size: 128MB,
#        write-behind: 'on',
#        quick-read: 'on'
#      }
#  run_once: true

# - name: Linux GlusterFS - Ensure Gluster mount client
#   command: mount -t glusterfs {{ inventory_hostname }}:/{{ gluster_brick_name }}/{{ gluster_volume_name }} /{{ gluster_client_name }}
# #- name: Linux GlusterFS - Ensure Gluster volume is mounted.
# #  mount:
# #    name: "{{ gluster_client_name }}"
# #    src: "{{ inventory_hostname }}:/{{ gluster_volume_name }}"
# #    fstype: glusterfs
# #    opts: "defaults,_netdev"
# #    state: mounted

# - name: Linux GlusterFS - Stop gluster volume
#  gluster.gluster.gluster_volume:
#    state: stopped
#    name: "{{ gluster_volume_name }}"
#  run_once: true

#- name: Linux GlusterFS - Start gluster volume
#  gluster.gluster.gluster_volume:
#    state: started
#    name: "{{ gluster_volume_name }}"
#  run_once: true

## steps
# gluster peer probe node02